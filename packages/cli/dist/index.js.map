{"version":3,"sources":["../src/index.ts","../src/generate.ts","../src/prompts.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from 'commander';\nimport { generateAuthFiles } from './generate';\nimport { selectDatabase } from './prompts';\n\nconst program = new Command();\n\nprogram\n  .name('@skoly/auth-cli')\n  .description('CLI for setting up authentication in Node.js projects')\n  .version('0.1.0');\n\nprogram\n  .command('init')\n  .description('Initialize authentication setup')\n  .action(async () => {\n    console.log('Starting authentication setup...');\n    try {\n      console.log('Prompting for database selection...');\n      const dbType = await selectDatabase();\n      console.log(`Selected database: ${dbType}`);\n      console.log('Generating auth files...');\n      await generateAuthFiles(dbType);\n      console.log('âœ“ Authentication setup complete! Files generated in ./auth directory');\n    } catch (error) {\n      console.error('Error setting up authentication:', error);\n      process.exit(1);\n    }\n  });\n\nprogram.parse(process.argv);\n","import fs from 'fs-extra';\nimport path from 'path';\nimport { DatabaseType } from './types';\n\nexport async function generateAuthFiles(dbType: DatabaseType) {\n  console.log('Starting file generation...');\n  const authDir = path.join(process.cwd(), 'auth');\n  console.log(`Creating auth directory at: ${authDir}`);\n  \n  // Create auth directory\n  await fs.ensureDir(authDir);\n  console.log('Auth directory created');\n  \n  // Create subdirectories\n  const dbDir = path.join(authDir, 'db');\n  console.log(`Creating db directory at: ${dbDir}`);\n  await fs.ensureDir(dbDir);\n  console.log('db directory created');\n  \n  // Generate files\n  await Promise.all([\n    fs.writeFile(\n      path.join(authDir, 'auth.ts'),\n      generateAuthFileContent()\n    ),\n    fs.writeFile(\n      path.join(authDir, 'db', `${dbType}.ts`),\n      generateDbFileContent(dbType)\n    ),\n    fs.writeFile(\n      path.join(authDir, 'types.ts'),\n      generateTypesFileContent()\n    ),\n    fs.writeFile(\n      path.join(authDir, 'config.ts'),\n      generateConfigFileContent()\n    )\n  ]);\n}\n\nfunction generateAuthFileContent(): string {\n  return `// Core authentication logic\nexport * from './types';\nexport * from './config';\n`;\n}\n\nfunction generateDbFileContent(dbType: DatabaseType): string {\n  return `// ${dbType} specific database configuration\nexport const dbConfig = {\n  // Add your ${dbType} configuration here\n};\n`;\n}\n\nfunction generateTypesFileContent(): string {\n  return `// TypeScript interfaces and types\nexport interface User {\n  id: string;\n  email: string;\n  password: string;\n}\n\nexport interface Session {\n  userId: string;\n  token: string;\n  expiresAt: Date;\n}\n`;\n}\n\nfunction generateConfigFileContent(): string {\n  return `// Authentication configuration\nexport const authConfig = {\n  jwtSecret: process.env.JWT_SECRET || 'your-secret-key',\n  sessionDuration: '24h',\n  passwordRequirements: {\n    minLength: 8,\n    requireNumbers: true,\n    requireSpecialChars: true\n  }\n};\n`;\n}\n","import prompts from 'prompts';\n\nexport async function selectDatabase() {\n  const response = await prompts({\n    type: 'select',\n    name: 'database',\n    message: 'Select your database:',\n    choices: [\n      { title: 'PostgreSQL', value: 'postgres' },\n      { title: 'MongoDB', value: 'mongodb' },\n      { title: 'MySQL', value: 'mysql' },\n      { title: 'SQLite', value: 'sqlite' }\n    ],\n    initial: 0\n  });\n\n  return response.database;\n}\n"],"mappings":";AACA,OAAS,WAAAA,MAAe,YCDxB,OAAOC,MAAQ,WACf,OAAOC,MAAU,OAGjB,eAAsBC,EAAkBC,EAAsB,CAC5D,QAAQ,IAAI,6BAA6B,EACzC,IAAMC,EAAUH,EAAK,KAAK,QAAQ,IAAI,EAAG,MAAM,EAC/C,QAAQ,IAAI,+BAA+BG,GAAS,EAGpD,MAAMJ,EAAG,UAAUI,CAAO,EAC1B,QAAQ,IAAI,wBAAwB,EAGpC,IAAMC,EAAQJ,EAAK,KAAKG,EAAS,IAAI,EACrC,QAAQ,IAAI,6BAA6BC,GAAO,EAChD,MAAML,EAAG,UAAUK,CAAK,EACxB,QAAQ,IAAI,sBAAsB,EAGlC,MAAM,QAAQ,IAAI,CAChBL,EAAG,UACDC,EAAK,KAAKG,EAAS,SAAS,EAC5BE,EAAwB,CAC1B,EACAN,EAAG,UACDC,EAAK,KAAKG,EAAS,KAAM,GAAGD,MAAW,EACvCI,EAAsBJ,CAAM,CAC9B,EACAH,EAAG,UACDC,EAAK,KAAKG,EAAS,UAAU,EAC7BI,EAAyB,CAC3B,EACAR,EAAG,UACDC,EAAK,KAAKG,EAAS,WAAW,EAC9BK,EAA0B,CAC5B,CACF,CAAC,CACH,CAEA,SAASH,GAAkC,CACzC,MAAO;AAAA;AAAA;AAAA,CAIT,CAEA,SAASC,EAAsBJ,EAA8B,CAC3D,MAAO,MAAMA;AAAA;AAAA,gBAECA;AAAA;AAAA,CAGhB,CAEA,SAASK,GAAmC,CAC1C,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAaT,CAEA,SAASC,GAAoC,CAC3C,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAWT,CCnFA,OAAOC,MAAa,UAEpB,eAAsBC,GAAiB,CAcrC,OAbiB,MAAMD,EAAQ,CAC7B,KAAM,SACN,KAAM,WACN,QAAS,wBACT,QAAS,CACP,CAAE,MAAO,aAAc,MAAO,UAAW,EACzC,CAAE,MAAO,UAAW,MAAO,SAAU,EACrC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,SAAU,MAAO,QAAS,CACrC,EACA,QAAS,CACX,CAAC,GAEe,QAClB,CFZA,IAAME,EAAU,IAAIC,EAEpBD,EACG,KAAK,iBAAiB,EACtB,YAAY,uDAAuD,EACnE,QAAQ,OAAO,EAElBA,EACG,QAAQ,MAAM,EACd,YAAY,iCAAiC,EAC7C,OAAO,SAAY,CAClB,QAAQ,IAAI,kCAAkC,EAC9C,GAAI,CACF,QAAQ,IAAI,qCAAqC,EACjD,IAAME,EAAS,MAAMC,EAAe,EACpC,QAAQ,IAAI,sBAAsBD,GAAQ,EAC1C,QAAQ,IAAI,0BAA0B,EACtC,MAAME,EAAkBF,CAAM,EAC9B,QAAQ,IAAI,2EAAsE,CACpF,OAASG,EAAP,CACA,QAAQ,MAAM,mCAAoCA,CAAK,EACvD,QAAQ,KAAK,CAAC,CAChB,CACF,CAAC,EAEHL,EAAQ,MAAM,QAAQ,IAAI","names":["Command","fs","path","generateAuthFiles","dbType","authDir","dbDir","generateAuthFileContent","generateDbFileContent","generateTypesFileContent","generateConfigFileContent","prompts","selectDatabase","program","Command","dbType","selectDatabase","generateAuthFiles","error"]}